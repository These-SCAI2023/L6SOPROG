#LyX file created by tex2lyx 2.3
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin /home/luis/MEGA/MEGAsync/Sorbonne/Semestre 2/ProgrammationPython/L6SOPROG/TD/ressources/
\textclass article
\use_default_options false
\begin_modules
theorems-ams
\end_modules
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks 0
\pdf_bookmarksnumbered 0
\pdf_bookmarksopen 0
\pdf_bookmarksopenlevel 1
\pdf_breaklinks 0
\pdf_pdfborder 0
\pdf_colorlinks 0
\pdf_backref section
\pdf_pdfusetitle 0
\papersize a4paper
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Nous allons implanter le calcul de la distribution des mots d'un texte (son vocabulaire) en fonction de leur taille en caractères. Ainsi, vous devrez calculer le nombre de mots uniques pour une taille donnée comme le montre la Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "distrib"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard

\begin_inset Float figure
placement h
wide false
sideways false
status open


\begin_layout Standard

\begin_inset Graphics 
	filename TD/images/distrib.png
	width 60text%
	clip
	special trim

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Distribution des mots par rapport à leur taille en caractères dans différentes langues
\begin_inset CommandInset label
LatexCommand label
name "distrib"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'axe des abscisses représente la taille d'un mot en caractères et l'axe des ordonnées représente le nombre de mots uniques correspondant à cette taille.
\end_layout

\begin_layout Standard
Pour préparer votre espace de travail sur votre notebook 
\shape smallcaps
Jupyter
\shape default
, créez un dossier TD1 dans lequel vous enregistrerez votre code et vos données.
\end_layout

\begin_layout Standard
Pous constituer un corpus, vous utiliserez les fichiers textes suivants (choisissez plain text utf-8): 
\end_layout

\begin_layout Itemize

\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

Le discours de la méthode
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

 (fr) 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
http://www.gutenberg.org/ebooks/13846
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
%. Pour que les résultats soient plus significatifs, pensez à supprimer les premières phrases du fichier écrites en anglais.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

Ulysses
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

 (en) 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
http://www.gutenberg.org/ebooks/4300
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard

\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard

\series bold
Les étapes :
\series default

\end_layout

\begin_layout Enumerate

\series bold
lire
\series default
 les textes 
\end_layout

\begin_layout Enumerate

\series bold
découper
\series default
 en mots (ou tokeniser) 
\end_layout

\begin_layout Enumerate

\series bold
compter
\series default
 le nombre de mots par taille de caractères 
\end_layout

\begin_layout Enumerate

\series bold
observer
\series default
 les résultats chiffrés 
\end_layout

\begin_layout Enumerate

\series bold
représenter
\series default
 cela sur une courbe 
\end_layout

\begin_layout Standard

\series bold
Etape 1 : lire
\series default

\end_layout

\begin_layout Standard
On ouvre le fichier en indiquant son chemin (
\shape italic
path
\shape default
), si vous avez bien enregistré votre fichier au même endroit que votre code, le nom du fichier suffit .
\end_layout

\begin_layout Standard

\series bold
Si ça ne marche pas c'est que
\series default
 : 
\end_layout

\begin_layout Itemize
Tout n'est pas au bon endroit (
\family typewriter
File not Found
\family default
), regardez dans l'onglet 
\family typewriter
files
\family default
 de 
\shape smallcaps
Jupyter
\shape default
 pour voir où vous êtes. 
\end_layout

\begin_layout Itemize
ou que on a un problème d'encoding (
\family typewriter
charmap
\family default
), il faut ajouter ecoding ='utf-8' dans le open : open(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

13846-0.txt
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

, encoding =
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

utf-8
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

) 
\end_layout

\begin_layout Standard
Nous allons commencer par le 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

Discours de la Méthode
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

, si vous avez conservé le nom d'origine il devrait s'appeler 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

13846-0.txt
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 with open(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

13846-0.txt
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

) as f: chaine = f.read() 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Et on affiche un bout du texte pour vérifier que ça marche :
\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 print(chaine[:100]) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Etape 2 : découper
\series default

\end_layout

\begin_layout Standard
On va très simplement découper en mots avec la 
\series bold
méthode
\series default
 
\shape italic
split
\shape default
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 listemots = chaine.split()#approximation des occurrences print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

Nombre de mots : 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
%i" %len(liste_mots))
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Etape 3 : compter
\series default

\end_layout

\begin_layout Standard
On va utiliser un 
\series bold
dictionnaire
\series default
 (ou tableau associatif) où l'on va stocker pour chaque longueur en caractères le nombre de mots qu'on a rencontré. Le fonctionnement est le suivant: 
\end_layout

\begin_layout Itemize
pour chaque mot de la liste de mots, on calcule sa longueur 
\end_layout

\begin_layout Itemize
on vérifie si on a déjà rencontré un mot de cette longueur: 
\end_layout

\begin_deeper
\begin_layout Itemize
Si c'est le premier mot pour cette longueur on crée une 
\series bold
clé
\series default
 pour cette longueur à laquelle on affecte la 
\series bold
valeur
\series default
 1 
\end_layout

\begin_layout Itemize
Sinon, on 
\series bold
incrémente
\series default
 de 1 la valeur existante 
\end_layout

\end_deeper
\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 diclongueurs = 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
{}
\end_layout

\end_inset

 #un dictionnaire vide
\end_layout

\begin_layout Standard
for mot in listemots: longueur = len(mot)#la longueur du mot if longueur not in diclongueurs: #on a jamais vu cette longueur de mot diclongueurs[longueur]=1 # else: #on a vu cette longueur de mot diclongueurs[longueur]+=1
\end_layout

\begin_layout Standard
print(diclongueurs)#pour avoir une vue de ce qu'on a fait
\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
NB: si le processus ne vous semble pas clair, ajoutez au début de la boucle 
\shape italic
for
\shape default
 deux lignes (avec l'indentation) pour suivre le processus pas à pas :
\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 print(diclongueurs) dd=input(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

Appuyez sur Enter pour passer a la suite
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Etape 4: observer
\series default

\end_layout

\begin_layout Standard
Un dictionnaire n'est pas une structure de données ordonnée, pour vérifier que'on trouve des résultats proche de l'attendu, on va afficher le nombre d'occurences enregistré dans 
\family typewriter
dic_longueurs
\family default
 pour toutes les longueurs de 1 à 30 en utilisant 
\series bold
l'itérateur
\series default
 
\shape italic
range
\shape default
. Dans le 
\shape italic
print
\shape default
 on utilise du 
\series bold
formatage de chaînes de caractères
\series default

\begin_inset Foot
status collapsed


\begin_layout Standard
Voir par exemple 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
https://stackoverflow.com/questions/5082452/string-formatting-vs-format
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 for toto in range(1, 31):#de 1 à 30 (31 est exclu) nbroccurences = diclongueurs[toto] print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout
%i : %i"%(toto, nbr_occurences))
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vous verrez que le code plante car on a des longueurs qui ne sont pas dans le dictionnaire, on va donc améliorer le code de la façon suivante:
\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 for toto in range(30): if toto in diclongueurs: nbroccurences = diclongueurs[toto] print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout
%i : %i"%(toto, nbr_occurences))
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 else: nbroccurences = 0 print(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout
%i : %i"%(toto, nbr_occurences))
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Etape 5 : représenter
\series default

\end_layout

\begin_layout Standard
Et maintenant c'est magique, on va créer une courbe grâce à la librairie 
\family typewriter
matplotlib
\family default
. On va importer cette librairie et la renommer pour que ça soit plus court à écrire. Puis pour avoir les valeurs à mettre sur la courbe on va lire les valeurs dans l'ordre croissant pour les ranger dans une liste nommée 
\shape italic
liste_effectifs
\shape default
. Pyplot prend entrée un 
\series bold
vecteur
\series default
, une liste de valeurs ordonnées.
\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
begin{python}
\end_layout

\end_inset

 import matplotlib.pyplot as pyplot #import avec alias
\end_layout

\begin_layout Standard
listeeffectifs = [] for toto in range(30): if toto in diclongueurs:#on a donc vu des mots de cette longueur listeeffectifs.append(diclongueurs[toto]) else:#on en n'a pas vu de cette longueur, on ajoute donc un 0 listeeffectifs.append(0) pyplot.plot(listeeffectifs)#on 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

dessine
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

 pyplot.show()#
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

on affiche
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
end{python}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\begin_inset Float figure
wide false
sideways false
status open


\begin_layout Standard
\align center

\begin_inset Graphics 
	filename TD/images/TD1_effectifs1.png
	width 50text%

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout

\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

Discours de la Méthode
\begin_inset ERT
status collapsed

\begin_layout Plain Layout
"
\end_layout

\end_inset

 : nombre de mots par longueur (en abscisse), en ordonnée l'effectif
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Maintenant si on veut faire le même calcul pour l'autre texte on a juste à changer le nom du fichier dans l'étape 1 et à relancer toutes les cellules. Mais si on avait 100 textes à faire ça ne serait pas très pratique. Nous allons donc voir dans l'exercice suivant comment améliorer le code.
\end_layout

\end_body
\end_document
